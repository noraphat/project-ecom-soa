from fastapi import APIRouter, HTTPException, status, Depends, UploadFile, File, Form
from typing import List, Optional
from auth import get_current_user
from schemas import product as product_schema
from models import product as product_model

# ðŸ“¦ à¸ªà¸£à¹‰à¸²à¸‡ Router à¸ªà¸³à¸«à¸£à¸±à¸š Product
router = APIRouter(
    prefix="/products",
    tags=["Products"]
)

# ðŸ”¥ Endpoint à¸ªà¸³à¸«à¸£à¸±à¸šà¸ªà¸£à¹‰à¸²à¸‡ Product à¹ƒà¸«à¸¡à¹ˆ
@router.post("/", response_model=product_schema.ProductResponse, status_code=status.HTTP_201_CREATED)
def create_product(product: product_schema.ProductCreate, current_user: dict = Depends(get_current_user)):
    # à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¸ªà¸´à¸—à¸˜à¸´à¹Œ (à¹€à¸‰à¸žà¸²à¸° admin à¹€à¸—à¹ˆà¸²à¸™à¸±à¹‰à¸™à¸—à¸µà¹ˆà¸ªà¸£à¹‰à¸²à¸‡ product à¹„à¸”à¹‰)
    if current_user.get("role") != "admin":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Permission denied. Only admin can create products."
        )
        
    # à¸ªà¸£à¹‰à¸²à¸‡ product
    new_product = product_model.create_product(product)
    return new_product


# ðŸ”¥ Endpoint à¸ªà¸³à¸«à¸£à¸±à¸šà¸”à¸¶à¸‡à¸‚à¹‰à¸­à¸¡à¸¹à¸¥ Products à¸—à¸±à¹‰à¸‡à¸«à¸¡à¸”
@router.get("/", response_model=List[product_schema.ProductResponse])
def read_products():
    products = product_model.get_products()
    return products


# ðŸ”¥ Endpoint à¸ªà¸³à¸«à¸£à¸±à¸šà¸”à¸¶à¸‡à¸‚à¹‰à¸­à¸¡à¸¹à¸¥ Product à¸•à¸²à¸¡ ID
@router.get("/{product_id}", response_model=product_schema.ProductResponse)
def read_product(product_id: int):
    product = product_model.get_product_by_id(product_id)
    if product is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Product not found")
    return product


# ðŸ”¥ Endpoint à¸ªà¸³à¸«à¸£à¸±à¸šà¸­à¸±à¸›à¹€à¸”à¸• Product
@router.put("/{product_id}", response_model=product_schema.ProductResponse)
def update_product(
    product_id: int, 
    product_update: product_schema.ProductUpdate, 
    current_user: dict = Depends(get_current_user)
):
    # à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¸ªà¸´à¸—à¸˜à¸´à¹Œ (à¹€à¸‰à¸žà¸²à¸° admin à¹€à¸—à¹ˆà¸²à¸™à¸±à¹‰à¸™à¸—à¸µà¹ˆà¸­à¸±à¸›à¹€à¸”à¸• product à¹„à¸”à¹‰)
    if current_user.get("role") != "admin":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Permission denied. Only admin can update products."
        )
        
    # à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¸§à¹ˆà¸²à¸¡à¸µ Product à¸™à¸µà¹‰à¸«à¸£à¸·à¸­à¹„à¸¡à¹ˆ
    existing_product = product_model.get_product_by_id(product_id)
    if existing_product is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Product not found")
        
    # à¸­à¸±à¸›à¹€à¸”à¸• Product
    updated_product = product_model.update_product(product_id, product_update)
    return updated_product


# ðŸ”¥ Endpoint à¸ªà¸³à¸«à¸£à¸±à¸šà¸¥à¸š Product
@router.delete("/{product_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_product(product_id: int, current_user: dict = Depends(get_current_user)):
    # à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¸ªà¸´à¸—à¸˜à¸´à¹Œ (à¹€à¸‰à¸žà¸²à¸° admin à¹€à¸—à¹ˆà¸²à¸™à¸±à¹‰à¸™à¸—à¸µà¹ˆà¸¥à¸š product à¹„à¸”à¹‰)
    if current_user.get("role") != "admin":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Permission denied. Only admin can delete products."
        )
        
    # à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¸§à¹ˆà¸²à¸¡à¸µ Product à¸™à¸µà¹‰à¸«à¸£à¸·à¸­à¹„à¸¡à¹ˆ
    existing_product = product_model.get_product_by_id(product_id)
    if existing_product is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Product not found")
        
    # à¸¥à¸š Product
    product_model.delete_product(product_id)
    return None